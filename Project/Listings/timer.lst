C51 COMPILER V9.56.0.0   TIMER                                                             09/21/2020 10:07:36 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\hardware\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\hardware\DELAY;..\hardware\ADC;..\hardware\Flash;..\hardware\Uart;..\hardware\Key;..\hardware\Pwm;..\hardware\WDT;.
                    -.\hardware\Timer;..\hardware\LCDdisplay;..\hardware\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) TABS(2) OBJECT(.
                    -\Objects\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcddisplay.h"
   5          #include "key.h"
   6          #include "adc.h"
   7          #include "pwm.h"
   8          #include "PID.h"
   9          //----------------time---------------
  10          u16 time_cnt = 0;
  11          u16 time_sec = 0;
  12          u16 cnt_heat_time = 0;
  13          u8 over_rang_time_std = 0;
  14          u8 Gap_protect_std = 0 ;
  15          u8 On_stay = 0 , pwm_cnt = 0;
  16          
  17          u8 Heat_start_std = 0;
  18          u16 time_heat = 0;
  19          u16 temp_time = 0 ,cail_cnt = 0 ;
  20          u8  heat_step = 0;
  21          u16 pwm_jishu = 0;
  22          
  23          //void Controll_Heat ( void )
  24          //{
  25          //  //gm_printf ( " spid.iPriVal = %d \r\n",  spid.iPriVal);
  26          //  u8 heat_step_val = 100;
  27          //  if (Input_Voltage_std == V_24_status)
  28          //    {
  29          //          spid.iPriVal = spid.iPriVal/2;   
  30          //          heat_step_val = 50;
  31          //      }
  32          //  if (heat_step == 1)
  33          //    {
  34          //      set_pwm (heat_step_val);
  35          //    }
  36          //  else if (heat_step == 0)
  37          //    
  38          //    {
  39          //       set_pwm ((u8) spid.iPriVal);  //(u8) spid.iPriVal
  40          //    }
  41          //}
  42          
  43          
  44          void Heat_Operation ( u16 temp )
  45          {
  46   1        
  47   1        if(get_device_state() == ON)
  48   1        {
  49   2          if (Input_Voltage_std == V_12_status)
  50   2          {
  51   3                 temp =  temp*2 ;   
  52   3           }
C51 COMPILER V9.56.0.0   TIMER                                                             09/21/2020 10:07:36 PAGE 2   

  53   2          pwm_jishu++;
  54   2          if ( temp > pwm_jishu )
  55   2          {
  56   3            heat_out = 1;
  57   3          }
  58   2          else
  59   2          {
  60   3            heat_out = 0;
  61   3      
  62   3          }
  63   2          if ( pwm_jishu == pwm_count )
  64   2          {
  65   3            pwm_jishu =0;
  66   3          }
  67   2        } 
  68   1      }
  69          
  70          
  71          void set_time_sec_val ( u16 sec )
  72          {
  73   1        time_sec = sec;
  74   1        time_cnt = 0;
  75   1        gm_printf ( "set time second:%d\r\n",sec );
  76   1      }
  77          
  78          
  79          static void set_heat_val ( void )
  80          {
  81   1        if ( Heat_start_std == 1 )
  82   1        {
  83   2          if ( ++time_heat > Heat_Value )
  84   2          {
  85   3            //KEY_printf ( "exchange_heat_value \r\n" );
  86   3            Heat_start_std = 0;
  87   3            time_heat = 0;
  88   3      
  89   3             heat_step = 0;
  90   3          }
  91   2        }
  92   1      }
  93          
  94          void set_time_sec ( void )
  95          {
  96   1        time_cnt = 0;
  97   1        if ( flash_info.timer == TIMER_ON )
  98   1        {
  99   2          time_sec = 0;
 100   2          cnt_heat_time = 0;
 101   2          temp_time = 0;
 102   2        }
 103   1        else if ( flash_info.timer == TIMER_0_5H )
 104   1        {
 105   2          time_sec = 30*60;
 106   2          cnt_heat_time = 0;
 107   2          temp_time = 0;
 108   2        }
 109   1        else if ( flash_info.timer == TIMER_1H )
 110   1        {
 111   2          time_sec = 60*60;
 112   2          cnt_heat_time = 0;
 113   2          temp_time = 0;
 114   2        }
C51 COMPILER V9.56.0.0   TIMER                                                             09/21/2020 10:07:36 PAGE 3   

 115   1        else if ( flash_info.timer == TIMER_2H )
 116   1        {
 117   2          time_sec = 2*60*60;
 118   2          cnt_heat_time = 0;
 119   2          temp_time = 0;
 120   2        }
 121   1        else if ( flash_info.timer == TIMER_4H )
 122   1        {
 123   2          time_sec = 4*60*60;
 124   2          cnt_heat_time = 0;
 125   2          temp_time = 0;
 126   2        }
 127   1        else if ( flash_info.timer == TIMER_8H )
 128   1        {
 129   2          time_sec = 8*60*60;
 130   2          cnt_heat_time = 0;
 131   2          temp_time = 0;
 132   2        }
 133   1        gm_printf ( "time second:%d \r\n",time_sec );
 134   1      }
 135          
 136          
 137          void time0_init ( void )
 138          {
 139   1        /**********************************TIM0配置初始化**************************************/
 140   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc/12
 141   1        TMOD = 0x00;            //16位重装载定时器/计数器
 142   1      
 143   1        //Tim0计算时间  = (65536 - 0xFACB) * (1 / (Fosc /Timer分频系数))
 144   1        //        = 1333 / (16000000 / 12)
 145   1        //        = 1 ms
 146   1      
 147   1        //定时1ms
 148   1        //反推初值  = 65536 - ((1/1000) / (1/(Fosc / Timer分频系数)))
 149   1        //        = 65536 - ((1/1000) / (1/(16000000 / 12)))
 150   1        //      = 65536 - 1333
 151   1        //      = 0xFACB
 152   1      //    TH0 = 0xCB;  10ms
 153   1      //  TL0 = 0xEB;
 154   1        TH0 = 0xF5;
 155   1        TL0 = 0x96;             //T0定时时间2ms     0x96     10ms   0xFB
 156   1        IE |= 0x02;             //打开T0中断
 157   1        TCON |= 0x10;           //使能T0
 158   1      }
 159          
 160          
 161          
 162          //10ms
 163          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 164          {
 165   1        if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 166   1        {
 167   2          time_cnt++;
 168   2          if ( time_cnt >= 500 )
 169   2          {
 170   3            set_heat_val();
 171   3      
 172   3            if ( On_stay == 2 )  // stay on 模式下进行保护
 173   3            {
 174   4              cnt_heat_time++;
 175   4              if ( cnt_heat_time > overrang_time )
 176   4              {
C51 COMPILER V9.56.0.0   TIMER                                                             09/21/2020 10:07:36 PAGE 4   

 177   5                On_stay = 0;
 178   5                cnt_heat_time = 0;
 179   5                over_rang_time_std = 1;
 180   5                //gm_printf ( "On_stay_overrang \r\n" );
 181   5              }
 182   4      
 183   4            }
 184   3            if ( time_sec > 0 )
 185   3            {
 186   4      
 187   4              time_sec--;
 188   4              if ( Gap_protect_std == 2 )
 189   4              {
 190   5      
 191   5                cnt_heat_time++;
 192   5      
 193   5      
 194   5                if ( cnt_heat_time > overrang_time )
 195   5                {
 196   6                  over_rang_time_std = 1;
 197   6                  Gap_protect_std = 0;
 198   6                  cnt_heat_time = 0;
 199   6                  //gm_printf ( "protect \r\n" );
 200   6                }
 201   5              }
 202   4            }
 203   3            else
 204   3            {
 205   4              if ( flash_info.timer != TIMER_ON )
 206   4              {
 207   5                set_device_state ( OFF );
 208   5                time_sec = 0;
 209   5                cnt_heat_time = 0;
 210   5                Gap_protect_std = 0;
 211   5                On_stay = 0;
 212   5                //ht1621_all_clear(); //定时时间到
 213   5                gm_printf ( "time off \r\n" );
 214   5              }
 215   4            }
 216   3            //  gm_printf("time_sec=%d \r\n",time_sec);
 217   3            time_cnt = 0;
 218   3          }
 219   2      
 220   2      //      Heat_Operation ( 500 );
 221   2          
 222   2        }
 223   1        else if (calibration_std == 1)
 224   1        {
 225   2          if (++cail_cnt > cail_value)
 226   2          {
 227   3            calibration_std = 0;
 228   3            cail_cnt = 0;
 229   3            
 230   3          }
 231   2        }
 232   1        LCD_Display();
 233   1        
 234   1      }
 235          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.56.0.0   TIMER                                                             09/21/2020 10:07:36 PAGE 5   

   CODE SIZE        =    649    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =     20       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
