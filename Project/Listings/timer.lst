C51 COMPILER V9.56.0.0   TIMER                                                             11/07/2020 10:13:47 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\hardware\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\hardware\DELAY;..\hardware\ADC;..\hardware\Flash;..\hardware\Uart;..\hardware\Key;..\hardware\Pwm;..\hardware\WDT;.
                    -.\hardware\Timer;..\hardware\LCDdisplay;..\hardware\PID;..\hardware\TUYA) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst)
                    - TABS(2) OBJECT(.\Objects\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcddisplay.h"
   5          #include "key.h"
   6          #include "adc.h"
   7          #include "pwm.h"
   8          #include "PID.h"
   9          //----------------time---------------
  10          u16 time_cnt = 0;
  11          u16 time_sec = 0;
  12          u16 cnt_heat_time = 0;
  13          u8 over_rang_time_std = 0;
  14          u8 Gap_protect_std = 0 ;
  15          u8 On_stay = 0, pwm_cnt = 0;
  16          
  17          u8 Heat_start_std = 0;
  18          u16 time_heat = 0;
  19          u16 temp_time = 0,cail_cnt = 0 ;
  20          u8  heat_step = 0;
  21          u16 pwm_jishu = 0;
  22          u16 pwm_set = 0;
  23          u16 correct_time = 0;
  24          
  25          led_info LED = {0,0};
  26          
  27          void led_set_on(void)
  28          {
  29   1        LED.led_std = 1;
  30   1        LED.led_time_cnt = 0;
  31   1      }
  32          void led_set_off(void)
  33          {
  34   1        LED.led_std = 0;
  35   1        LED.led_time_cnt = 0;
  36   1      }
  37          
  38          static void led_time(void)
  39          {
  40   1        if( LED.led_std == 1)
  41   1        {
  42   2          LED_IO = 1;
  43   2          if (++LED.led_time_cnt > LED_ON_TIME)
  44   2          {
  45   3            LED_IO = 0;
  46   3             LED.led_std = 0;
  47   3            LED.led_time_cnt = 0;
  48   3          }
  49   2        
  50   2        }
  51   1      else
  52   1      {
C51 COMPILER V9.56.0.0   TIMER                                                             11/07/2020 10:13:47 PAGE 2   

  53   2       LED_IO = 0;
  54   2      }
  55   1      
  56   1      }
  57          
  58          void Heat_Operation ( u16 temp )
  59          {
  60   1      
  61   1        if ( get_device_state() == ON )
  62   1        {
  63   2      
  64   2          if ( Input_Voltage_std == V_12_status )
  65   2          {
  66   3            temp =  temp*2 ;
  67   3          }
  68   2          else if ( Input_Voltage_std == V_24_status )
  69   2          {
  70   3            temp =  temp/2;
  71   3          }
  72   2          pwm_jishu++;
  73   2          if ( temp > pwm_jishu )
  74   2          {
  75   3            heat_out = 1;
  76   3          }
  77   2          else
  78   2          {
  79   3            heat_out = 0;
  80   3      
  81   3          }
  82   2          if ( pwm_jishu == pwm_count )
  83   2          {
  84   3            pwm_jishu =0;
  85   3          }
  86   2      
  87   2        }
  88   1      }
  89          
  90          void PWM_control ( u8 gap )
  91          {
  92   1        if(heat_step == 1)
  93   1        {
  94   2         pwm_set = full_pwm_set;
  95   2        }
  96   1      else
  97   1      { 
  98   2        switch ( gap )
  99   2        {
 100   3          case GAP_1:
 101   3            pwm_set = spid.iPriVal;
 102   3            break;
 103   3          case GAP_2:
 104   3            pwm_set = spid.iPriVal;
 105   3            break;
 106   3          case GAP_3:
 107   3            pwm_set = spid.iPriVal;
 108   3            break;
 109   3          case GAP_4:
 110   3          case GAP_5:
 111   3          case GAP_6:
 112   3            pwm_set = spid.iPriVal;
 113   3            break;
 114   3        }
C51 COMPILER V9.56.0.0   TIMER                                                             11/07/2020 10:13:47 PAGE 3   

 115   2      }
 116   1      }
 117          
 118          
 119          void set_time_sec_val ( u16 sec )
 120          {
 121   1        time_sec = sec;
 122   1        time_cnt = 0;
 123   1        gm_printf ( "set time second:%d\r\n",sec );
 124   1      }
 125          
 126          
 127          void set_correct_time(u8 gap)
 128          {
 129   1        
 130   1      switch ( gap )
 131   1        {
 132   2          case GAP_WARM:
 133   2            correct_time = corrected_time_warm_temp;
 134   2            break;
 135   2          case GAP_1:
 136   2            correct_time = corrected_time_GAP_1_temp;
 137   2            break;
 138   2          case GAP_2:
 139   2            correct_time = corrected_time_GAP_2_temp;
 140   2            break;
 141   2          case GAP_3:
 142   2            correct_time = corrected_time_GAP_3_temp;
 143   2            break;
 144   2          case GAP_4:
 145   2            correct_time = corrected_time_GAP_4_temp;
 146   2            break;
 147   2          case GAP_5:
 148   2            correct_time = corrected_time_GAP_5_temp;
 149   2            break;
 150   2          case GAP_6:
 151   2            correct_time = corrected_time_GAP_6_temp;
 152   2            break;
 153   2          case GAP_7:
 154   2            correct_time = corrected_time_GAP_7_temp;
 155   2            break;
 156   2          case GAP_8:
 157   2            correct_time = corrected_time_GAP_8_temp;
 158   2            break;
 159   2          case GAP_9:
 160   2            correct_time = corrected_time_GAP_9_temp;
 161   2            break;
 162   2      
 163   2      }
 164   1        }
 165          
 166          
 167          static void set_heat_val ( void )
 168          {
 169   1        if ( Heat_start_std == 1 )
 170   1        {
 171   2          if ( ++time_heat > correct_time )
 172   2          {
 173   3      
 174   3            Heat_start_std = 0;
 175   3            time_heat = 0;
 176   3      
C51 COMPILER V9.56.0.0   TIMER                                                             11/07/2020 10:13:47 PAGE 4   

 177   3            heat_step = 0;
 178   3          }
 179   2        }
 180   1      }
 181          
 182          void set_time_sec ( void )
 183          {
 184   1        time_cnt = 0;
 185   1        if ( flash_info.timer == TIMER_ON )
 186   1        {
 187   2          time_sec = 0;
 188   2          cnt_heat_time = 0;
 189   2          temp_time = 0;
 190   2        }
 191   1        else if ( flash_info.timer == TIMER_0_5H )
 192   1        {
 193   2          time_sec = 30*60;
 194   2          cnt_heat_time = 0;
 195   2          temp_time = 0;
 196   2        }
 197   1        else if ( flash_info.timer == TIMER_1H )
 198   1        {
 199   2          time_sec = 60*60;
 200   2          cnt_heat_time = 0;
 201   2          temp_time = 0;
 202   2        }
 203   1        else if ( flash_info.timer == TIMER_2H )
 204   1        {
 205   2          time_sec = 2*60*60;
 206   2          cnt_heat_time = 0;
 207   2          temp_time = 0;
 208   2        }
 209   1        else if ( flash_info.timer == TIMER_4H )
 210   1        {
 211   2          time_sec = 4*60*60;
 212   2          cnt_heat_time = 0;
 213   2          temp_time = 0;
 214   2        }
 215   1        else if ( flash_info.timer == TIMER_8H )
 216   1        {
 217   2          time_sec = 8*60*60;
 218   2          cnt_heat_time = 0;
 219   2          temp_time = 0;
 220   2        }
 221   1        gm_printf ( "time second:%d \r\n",time_sec );
 222   1      }
 223          
 224          
 225          void time0_init ( void )
 226          {
 227   1        /**********************************TIM0配置初始化**************************************/
 228   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc/12
 229   1        TMOD = 0x00;            //16位重装载定时器/计数器
 230   1      
 231   1        //Tim0计算时间  = (65536 - 0xFACB) * (1 / (Fosc /Timer分频系数))
 232   1        //        = 1333 / (16000000 / 12)
 233   1        //        = 1 ms
 234   1      
 235   1        //定时1ms
 236   1        //反推初值  = 65536 - ((1/1000) / (1/(Fosc / Timer分频系数)))
 237   1        //        = 65536 - ((1/1000) / (1/(16000000 / 12)))
 238   1        //      = 65536 - 1333
C51 COMPILER V9.56.0.0   TIMER                                                             11/07/2020 10:13:47 PAGE 5   

 239   1        //      = 0xFACB
 240   1      //    TH0 = 0xCB;  10ms
 241   1      //  TL0 = 0xEB;
 242   1        TH0 = 0xF5;
 243   1        TL0 = 0x96;             //T0定时时间2ms     0x96     10ms   0xFB
 244   1        IE |= 0x02;             //打开T0中断
 245   1        TCON |= 0x10;           //使能T0
 246   1      }
 247          
 248          
 249          
 250          //10ms
 251          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 252          {
 253   1        led_time();
 254   1        if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 255   1        {
 256   2          time_cnt++;
 257   2          if ( time_cnt >= 500 )
 258   2          {
 259   3            set_heat_val();
 260   3      
 261   3            if ( On_stay == 2 )  // stay on 模式下进行保护
 262   3            {
 263   4              cnt_heat_time++;
 264   4              if ( cnt_heat_time > overrang_time )
 265   4              {
 266   5                On_stay = 0;
 267   5                cnt_heat_time = 0;
 268   5                over_rang_time_std = 1;
 269   5                //gm_printf ( "On_stay_overrang \r\n" );
 270   5              }
 271   4      
 272   4            }
 273   3            if ( time_sec > 0 )
 274   3            {
 275   4      
 276   4              time_sec--;
 277   4              if ( Gap_protect_std == 2 )
 278   4              {
 279   5      
 280   5                cnt_heat_time++;
 281   5      
 282   5      
 283   5                if ( cnt_heat_time > overrang_time )
 284   5                {
 285   6                  over_rang_time_std = 1;
 286   6                  Gap_protect_std = 0;
 287   6                  cnt_heat_time = 0;
 288   6                  //gm_printf ( "protect \r\n" );
 289   6                }
 290   5              }
 291   4            }
 292   3            else
 293   3            {
 294   4              if ( flash_info.timer != TIMER_ON )
 295   4              {
 296   5                set_device_state ( OFF );
 297   5                time_sec = 0;
 298   5                cnt_heat_time = 0;
 299   5                Gap_protect_std = 0;
 300   5                On_stay = 0;
C51 COMPILER V9.56.0.0   TIMER                                                             11/07/2020 10:13:47 PAGE 6   

 301   5                //ht1621_all_clear(); //定时时间到
 302   5                //gm_printf ( "time off \r\n" );
 303   5              }
 304   4            }
 305   3            //  gm_printf("time_sec=%d \r\n",time_sec);
 306   3            time_cnt = 0;
 307   3          }
 308   2      
 309   2      
 310   2        }
 311   1        else if ( calibration_std == 1 )
 312   1        {
 313   2          if ( ++cail_cnt > cail_value )
 314   2          {
 315   3            calibration_std = 0;
 316   3            cail_cnt = 0;
 317   3      
 318   3          }
 319   2        }
 320   1        LCD_Display();
 321   1      
 322   1      }
 323          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    872    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =     27       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
