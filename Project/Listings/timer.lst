C51 COMPILER V9.56.0.0   TIMER                                                             11/24/2020 14:40:59 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: C:\program_list\keil\C51\BIN\C51.EXE ..\hardware\Timer\timer.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(..\hardware\DELAY;..\hardware\ADC;..\hardware\Flash;..\hardware\Uart;..\hardware\Key;..\hardware\Pwm;..\hardware\WDT;.
                    -.\hardware\Timer;..\hardware\LCDdisplay;..\hardware\PID) DEBUG OBJECTEXTEND PRINT(.\Listings\timer.lst) TABS(2) OBJECT(.
                    -\Objects\timer.obj)

line level    source

   1          #include "timer.h"
   2          #include "flash.h"
   3          #include "uart.h"
   4          #include "lcddisplay.h"
   5          #include "key.h"
   6          #include "adc.h"
   7          #include "pwm.h"
   8          #include "PID.h"
   9          //----------------time---------------
  10          u16 time_cnt = 0;
  11          u16 time_sec = 0;
  12          u16 cnt_heat_time = 0;
  13          u8 over_rang_time_std = 0;
  14          u8 Gap_protect_std = 0 ;
  15          u8 On_stay = 0, pwm_cnt = 0;
  16          
  17          u8 Heat_start_std = 0;
  18          u16 time_heat = 0;
  19          u16 temp_time = 0,cail_cnt = 0 ;
  20          u8  heat_step = 0;
  21          u16 pwm_jishu = 0;
  22          u16 pwm_set = 0;
  23          u16 correct_time = 0;
  24          void Heat_Operation ( u16 temp )
  25          {
  26   1      
  27   1        if ( get_device_state() == ON )
  28   1        {
  29   2      
  30   2          if ( Input_Voltage_std == V_12_status )
  31   2          {
  32   3            temp =  temp*2 ;
  33   3          }
  34   2          else if ( Input_Voltage_std == V_24_status )
  35   2          {
  36   3            temp =  temp/2;
  37   3          }
  38   2          pwm_jishu++;
  39   2          if ( temp > pwm_jishu )
  40   2          {
  41   3            heat_out = 1;
  42   3          }
  43   2          else
  44   2          {
  45   3            heat_out = 0;
  46   3      
  47   3          }
  48   2          if ( pwm_jishu == pwm_count )
  49   2          {
  50   3            pwm_jishu =0;
  51   3          }
  52   2      
C51 COMPILER V9.56.0.0   TIMER                                                             11/24/2020 14:40:59 PAGE 2   

  53   2        }
  54   1      }
  55          
  56          void PWM_control ( u8 gap )
  57          {
  58   1        if(heat_step == 1)
  59   1        {
  60   2         pwm_set = full_pwm_set;
  61   2        }
  62   1      else
  63   1      { 
  64   2        switch ( gap )
  65   2        {
  66   3          case GAP_1:
  67   3            pwm_set = spid.iPriVal;
  68   3            break;
  69   3          case GAP_2:
  70   3            pwm_set = spid.iPriVal;
  71   3            break;
  72   3          case GAP_3:
  73   3            pwm_set = spid.iPriVal;
  74   3            break;
  75   3          case GAP_4:
  76   3          case GAP_5:
  77   3          case GAP_6:
  78   3            pwm_set = spid.iPriVal;
  79   3            break;
  80   3        }
  81   2        pwm_set = full_pwm_set;
  82   2      }
  83   1      }
  84          
  85          
  86          void set_time_sec_val ( u16 sec )
  87          {
  88   1        time_sec = sec;
  89   1        time_cnt = 0;
  90   1        gm_printf ( "set time second:%d\r\n",sec );
  91   1      }
  92          
  93          
  94          void set_correct_time(u8 gap)
  95          {
  96   1        
  97   1      switch ( gap )
  98   1        {
  99   2          case GAP_WARM:
 100   2            correct_time = corrected_time_warm_temp;
 101   2            break;
 102   2          case GAP_1:
 103   2            correct_time = corrected_time_GAP_1_temp;
 104   2            break;
 105   2          case GAP_2:
 106   2            correct_time = corrected_time_GAP_2_temp;
 107   2            break;
 108   2          case GAP_3:
 109   2            correct_time = corrected_time_GAP_3_temp;
 110   2            break;
 111   2          case GAP_4:
 112   2            correct_time = corrected_time_GAP_4_temp;
 113   2            break;
 114   2          case GAP_5:
C51 COMPILER V9.56.0.0   TIMER                                                             11/24/2020 14:40:59 PAGE 3   

 115   2            correct_time = corrected_time_GAP_5_temp;
 116   2            break;
 117   2          case GAP_6:
 118   2            correct_time = corrected_time_GAP_6_temp;
 119   2            break;
 120   2          case GAP_7:
 121   2            correct_time = corrected_time_GAP_7_temp;
 122   2            break;
 123   2          case GAP_8:
 124   2            correct_time = corrected_time_GAP_8_temp;
 125   2            break;
 126   2          case GAP_9:
 127   2            correct_time = corrected_time_GAP_9_temp;
 128   2            break;
 129   2      
 130   2      }
 131   1        }
 132          
 133          
 134          static void set_heat_val ( void )
 135          {
 136   1        if ( Heat_start_std == 1 )
 137   1        {
 138   2          if ( ++time_heat > correct_time )
 139   2          {
 140   3      
 141   3            Heat_start_std = 0;
 142   3            time_heat = 0;
 143   3      
 144   3            heat_step = 0;
 145   3          }
 146   2        }
 147   1      }
 148          
 149          void set_time_sec ( void )
 150          {
 151   1        time_cnt = 0;
 152   1        if ( flash_info.timer == TIMER_ON )
 153   1        {
 154   2          time_sec = 0;
 155   2          cnt_heat_time = 0;
 156   2          temp_time = 0;
 157   2        }
 158   1        else if ( flash_info.timer == TIMER_0_5H )
 159   1        {
 160   2          time_sec = 30*60;
 161   2          cnt_heat_time = 0;
 162   2          temp_time = 0;
 163   2        }
 164   1        else if ( flash_info.timer == TIMER_1H )
 165   1        {
 166   2          time_sec = 60*60;
 167   2          cnt_heat_time = 0;
 168   2          temp_time = 0;
 169   2        }
 170   1        else if ( flash_info.timer == TIMER_2H )
 171   1        {
 172   2          time_sec = 2*60*60;
 173   2          cnt_heat_time = 0;
 174   2          temp_time = 0;
 175   2        }
 176   1        else if ( flash_info.timer == TIMER_4H )
C51 COMPILER V9.56.0.0   TIMER                                                             11/24/2020 14:40:59 PAGE 4   

 177   1        {
 178   2          time_sec = 4*60*60;
 179   2          cnt_heat_time = 0;
 180   2          temp_time = 0;
 181   2        }
 182   1        else if ( flash_info.timer == TIMER_8H )
 183   1        {
 184   2          time_sec = 8*60*60;
 185   2          cnt_heat_time = 0;
 186   2          temp_time = 0;
 187   2        }
 188   1        gm_printf ( "time second:%d \r\n",time_sec );
 189   1      }
 190          
 191          
 192          void time0_init ( void )
 193          {
 194   1        /**********************************TIM0配置初始化**************************************/
 195   1        TCON1 = 0x00;           //Tx0定时器时钟为Fosc/12
 196   1        TMOD = 0x00;            //16位重装载定时器/计数器
 197   1      
 198   1        //Tim0计算时间  = (65536 - 0xFACB) * (1 / (Fosc /Timer分频系数))
 199   1        //        = 1333 / (16000000 / 12)
 200   1        //        = 1 ms
 201   1      
 202   1        //定时1ms
 203   1        //反推初值  = 65536 - ((1/1000) / (1/(Fosc / Timer分频系数)))
 204   1        //        = 65536 - ((1/1000) / (1/(16000000 / 12)))
 205   1        //      = 65536 - 1333
 206   1        //      = 0xFACB
 207   1      //    TH0 = 0xCB;  10ms
 208   1      //  TL0 = 0xEB;
 209   1        TH0 = 0xF5;
 210   1        TL0 = 0x96;             //T0定时时间2ms     0x96     10ms   0xFB
 211   1        IE |= 0x02;             //打开T0中断
 212   1        TCON |= 0x10;           //使能T0
 213   1      }
 214          
 215          
 216          
 217          //10ms
 218          void TIMER0_Rpt ( void ) interrupt TIMER0_VECTOR
 219          {
 220   1        if ( get_device_state() == ON ) //flash_info.timer != TIMER_ON &&
 221   1        {
 222   2          time_cnt++;
 223   2          if ( time_cnt >= 500 )
 224   2          {
 225   3            set_heat_val();
 226   3      
 227   3            if ( On_stay == 2 )  // stay on 模式下进行保护
 228   3            {
 229   4              cnt_heat_time++;
 230   4              if ( cnt_heat_time > overrang_time )
 231   4              {
 232   5                On_stay = 0;
 233   5                cnt_heat_time = 0;
 234   5                over_rang_time_std = 1;
 235   5                //gm_printf ( "On_stay_overrang \r\n" );
 236   5              }
 237   4      
 238   4            }
C51 COMPILER V9.56.0.0   TIMER                                                             11/24/2020 14:40:59 PAGE 5   

 239   3            if ( time_sec > 0 )
 240   3            {
 241   4      
 242   4              time_sec--;
 243   4              if ( Gap_protect_std == 2 )
 244   4              {
 245   5      
 246   5                cnt_heat_time++;
 247   5      
 248   5      
 249   5                if ( cnt_heat_time > overrang_time )
 250   5                {
 251   6                  over_rang_time_std = 1;
 252   6                  Gap_protect_std = 0;
 253   6                  cnt_heat_time = 0;
 254   6                  //gm_printf ( "protect \r\n" );
 255   6                }
 256   5              }
 257   4            }
 258   3            else
 259   3            {
 260   4              if ( flash_info.timer != TIMER_ON )
 261   4              {
 262   5                set_device_state ( OFF );
 263   5                time_sec = 0;
 264   5                cnt_heat_time = 0;
 265   5                Gap_protect_std = 0;
 266   5                On_stay = 0;
 267   5                //ht1621_all_clear(); //定时时间到
 268   5                //gm_printf ( "time off \r\n" );
 269   5              }
 270   4            }
 271   3            //  gm_printf("time_sec=%d \r\n",time_sec);
 272   3            time_cnt = 0;
 273   3          }
 274   2      
 275   2      
 276   2        }
 277   1        else if ( calibration_std == 1 )
 278   1        {
 279   2          if ( ++cail_cnt > cail_value )
 280   2          {
 281   3            calibration_std = 0;
 282   3            cail_cnt = 0;
 283   3      
 284   3          }
 285   2        }
 286   1        LCD_Display();
 287   1      
 288   1      }
 289          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    803    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =     24       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.56.0.0   TIMER                                                             11/24/2020 14:40:59 PAGE 6   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
