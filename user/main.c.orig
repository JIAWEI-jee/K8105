/**
*	************************************************************************************
*	@Examle Version		K8104
*	@Demo	Version		V1.00.00
*	@Date				2020.6。23
*	************************************************************************************
*
**/

#define	ALLOCATE_EXTERN
#include "HC89F3541.H"
#include "delay.h"
#include "adc.h"
#include "flash.h"
#include "key.h"
#include "uart.h"
#include "pwm.h"
#include "wdt.h"
#include "timer.h"
#include "lcddisplay.h"
#include "PID.h"

#define SKU 8104
#define SOFT_VER "1.00.00"


u16 adc_cnt = 0;
u8  first_heat_std = 0;
u8  error_std = 0;

void Clock ( void );
void Set_Temp (void);
void Controll_Heat ( void );
void Protect ( void );



static void key_handle ( void )
{
	u8 key_val = 0;

	if ( error_std == 0 )

	{
		key_val = key_scan();
	}
	else
	{
		key_val = 0;
	}
	if ( key_val == KEY_1_PRES )
	{
		KEY_printf ( " key_scan\r\n" );
		if ( get_device_state() == ON )
		{
			set_device_state ( OFF );

			set_pwm ( 0 );
		}
		else
		{
			set_device_state ( ON );
			set_time_sec();
			if ( flash_info.gap > GAP_1 )
			{
				if ( flash_info.timer == TIMER_ON )
				{
					On_stay = 2;
				}
				else if ( flash_info.timer > TIMER_2H )
				{
					Gap_protect_std = 2;
				}
			}
			Set_Temp ( );
		//	gm_printf ( " spid.iSetVal = %d \r\n",  spid.iSetVal);
			first_heat_std = 1;

		}
	}
	else if ( get_device_state() == ON )
	{



		if ( key_val == KEY_2_PRES ) //??
		{

			KEY_printf ( " KEY_2_PRES\r\n" );
			if ( flash_info.gap < GAP_H )
			{
				flash_info.gap++;

			}
			else
			{
				flash_info.gap = GAP_1;
			}
			if ( flash_info.gap > GAP_3 )
			{
				if ( flash_info.timer == TIMER_ON )
				{
					On_stay = 2;
				}
				else if ( flash_info.timer > TIMER_2H )
				{
					Gap_protect_std = 2;
				}
			}

			first_heat_std = 1;
           Set_Temp ( );
		//	gm_printf ( " spid.iSetVal = %d \r\n",  spid.iSetVal);
			lcd_display_gap ( flash_info.gap );
			//set_time_sec();
			flah_save_data();
		}
		else if ( key_val == KEY_3_PRES ) //??
		{

			if ( flash_info.timer < 0x05 )
			{
				flash_info.timer++;
			}
			else
			{
				flash_info.timer = TIMER_ON;
			}

			KEY_printf ( "timer:%d \r\n", ( u16 ) flash_info.timer );
			lcd_display_time ( flash_info.timer );
			set_time_sec();
			flah_save_data();
		}
	}
}

u16 temp_calc ( u16 uRt,u16 uRw )
{
	u8 i = 0;
	u8 basi_tmp = 50;
	u8 k = 10;
	float u1 = 0;
	float u3 = 0;
	if ( uRt < 50 )
	{
		return 0;
	}

	u1 = ( float ) uRt/1000;
	u3 = 	( float ) uRw /1000;
	u1 = (  u3 - u1 ) / u1 * 220;
	if ( u1 < 0 )
	{
		return 0;
	}
	//gm_printf ( "R = %f  \r\n",u1 );
	u1 = u1 / Length;
	// gm_printf("average R = %f \r\n",u1);
	u1 = u1 / Temperature_Value;
	//gm_printf("cmp = %f \r\n",u1);
	if ( u1*Temperature_Value > Temperature_Value )
	{
		while ( 1 )
		{
			u1 = u1 / ( 1 + 0.0048 );
			i++;
			if ( u1 <= 1 )
			{
				break;
			}

		}

		basi_tmp = basi_tmp + i;
	}
	else
	{
		while ( 1 )
		{
			u1 = u1 / ( 1 - 0.0048 );
			i++;
			if ( u1 >= 1 )
			{
				break;
			}


		}

		basi_tmp = basi_tmp - i;
	}
	// gm_printf("temp:%d \r\n",basi_tmp);
	return ( basi_tmp-Correct_Value );
}



void temperature_handle ( void )
{
	u16 temp = 0;
	u16 adc_val1 = 0,adc_val2 = 0;

	// if(get_device_state() == ON)
	//{
	adc_cnt++;

	if ( adc_cnt >= 50000 )
	{
		adc_cnt = 0;
		get_voltage ( &adc_val1,&adc_val2 );

		//KEY_printf ( "adv1 = %d adv2 =%d \r\n",adc_val1,adc_val2 );  //pjw set
		temp = temp_calc ( adc_val1, adc_val2 );
		//KEY_printf ( "temp val:%d \r\n",temp );

       
		if ( adc_val1 >50 )
		{
			if ( get_device_state() == ON )
			{
				
   				spid.iCurVal = temp*10;
//				if ( first_heat_std == 1 )
//				{
//					first_heat_std = 0;
//					if ( temp > 50 )
//					{
//						Heat_start_std = 1;
//						Open_Heat_Value = corrected_value_GAP_9_temp	;
//					}
//					else
//					{
//						Heat_start_std = 1;
//						Open_Heat_Value = corrected_value_warm_temp	;
//					}
//				}
        PID_Operation ();
				lcd_display_time ( flash_info.timer );
				lcd_display_gap ( flash_info.gap );
			Controll_Heat (  );
			}
			else
			{ 
				set_pwm ( 0 );
				lcd_clear_all();
			}
			error_std = 0;
		}
		else
		{
			

			lcd_error (  );
            error_std = 1;
		}
//  PID_Operation ();
  
	}


}








void main()
{
	Clock();
	uart_init();
	adc_init();
	EA = 1;
	time0_init ();						//打开总中断
	key_init();
	flash_init();
	PID_Init();
	pwm_init ( 200 );
	wdt_init ( 2 );
	LCD_Init();
	lcd_display_On();
	delay_ms ( 1200 );
	lcd_clear_all ();
	gm_printf ( "\r\n==================================\r\n" );
	gm_printf ( "sku:K%d \r\n", ( u16 ) SKU );
	gm_printf ( "soft version:%s \r\n",SOFT_VER );
	gm_printf ( "gap %d \r\n", ( u16 ) flash_info.gap );      //档位
	gm_printf ( "timer %d \r\n", ( u16 ) flash_info.timer );  // 定时
	gm_printf ( "==================================\r\n" );

	while ( 1 )
	{


		temperature_handle();
		key_handle ();
		Protect ();
		clear_wdt();

	}
}



void Clock ( void )
{
	/************************************系统初始化****************************************/
	CLKSWR = 0x51;						//选择内部高频RC为系统时钟，内部高频RC 2分频，Fosc=16MHz
	CLKDIV = 0x01;						//Fosc 1分频得到Fcpu，Fcpu=16MHz
}

void Controll_Heat ( void )
{
	 // gm_printf ( " spid.iPriVal = %d \r\n",  spid.iPriVal);
    set_pwm ( (u8)spid.iPriVal );
}

void Set_Temp ( void )
{


	switch ( flash_info.gap )
	{
		case GAP_WARM:
			
			break;
		case GAP_1:
			 spid.iSetVal = GAP_1_temp*10;
			break;
		case GAP_2:
			spid.iSetVal = GAP_2_temp*10;
			break;
		case GAP_3:
			spid.iSetVal = GAP_3_temp*10;
			break;
		case GAP_H:
			spid.iSetVal = GAP_4_temp*10;
			break;
		case GAP_5:
			
			break;
		case GAP_6:
			
			break;
		case GAP_7:
			
			break;
		case GAP_8:
			
			break;
		case GAP_9:
			
			break;

	}
}




void Protect ( void )
{
	if ( over_rang_time_std == 1 )
	{
		if ( flash_info.gap > GAP_1 )
		{
			flash_info.gap = GAP_1;
			Set_Temp ( );
			//lcd_display_gap ( flash_info.gap );
			flah_save_data();
			over_rang_time_std = 0;
		}
	}
}

